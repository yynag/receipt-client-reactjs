
上下文：
1. 使用中文
2. 本项目使用pnpm管理依赖
3. 生成完之后检查一下编译是否成功

===============================


- 我添加了 old/redeem/i18n，重新处理一下国际化的问题，这就是软件设计隔离性做的不好。
- 你生成的还是沿用之前的组织方法，我说的直白一点，我对原来的代码都不满意：
  1. 主体UI代码放到 index.tsx 里面就足够了
  2. 如果有组件，那就放到目录的 components 文件夹里
  3. 不要什么hooks，services，网络请求代码放到 api 文件夹里，index.tsx 除了UI代码外，就是业务逻辑代码，请求部分直接调用api解决，不用搞花哨的东西。
  4. 对 old/redeem 进行完整的重构，除了兑换的业务逻辑不变，代码实现部分应该全部按照新的想法替换。
- 在修改代码之前，先告诉我你要怎么做，我给你纠正，获取我的同意之后再修改。


问题修复：
- 整体不居中，偏左
- 尺寸不和谐，Header太高，快速指南太高，兑换高度太小（兑换模块是主要的），footer也高
- 没有配色，全是白色的，要美观，组件结构不变，设计要现代化的风格。
- 网页是支持黑暗模式的，并且每次load，自动跟随设备切换。
- 语言切换的按钮，原来是只有图标，一个是中文图标，一个是英文图标，来回替换，亮暗切换的按钮也加上。

你先修复UI的问题，逻辑等你修复完了我再检查。


===============================

把 old/redeem 的代码迁移到 src/domains/redeem
- old/redeem 是来自其他项目的模块代码，已经上线了，你先查看它的代码，用我们现有的技术依赖（antd、reactjs）去做
- old/redeem 的UI设计我不喜欢，比如配色单一、设计不够现代化，不够专业。
- old/redeem 是完整的项目，希望能无缝衔接过来。
- 你了解当前项目的编码风格、组织方式再研究如何迁移。
- 这个项目是我一个人开发和维护，包括设计，尽量采用antd默认的组件样式，减少代码量、减少维护/开发成本。
- 还有一点很重要，软件设计，高内聚低耦合，模块化设计，代码隔离性，关注点聚焦，要最大化降低维护/开发的心智负担，这非常重要。

上下文：
1. 使用中文
2. 本项目使用pnpm管理依赖

===============================


用户管理，代码生成到 src/domains/admin/pages/user 中
- 同CDK管理差不多，用户管理的增删查改、角色的添加
- 用户模型：ID、CreatedAt、user_id、role
- user_id 类似于 邮箱、手机号码 这些比较有唯一性的字符串
- role目前只有 admin 和 stock 两种字符串
- 带分页功能
- 创建按钮：弹窗打开，输入用户ID和角色，点击确认创建

上下文：
1. 使用中文
2. 本项目使用pnpm管理依赖
3. 你在删除不是自己的代码之前先明白代码的用处，不要把我写的代码误删。


# 用户管理

用户模型：{"ID":0,"CreatedAt":"0001-01-01T00:00:00Z","UpdatedAt":"0001-01-01T00:00:00Z","DeletedAt":null,"user_id":"","role":""}

需求清单：
  - 列表页面：包含 ID、创建时间、用户ID、角色
  - 列表项最后列：删除
  - 筛选框：角色
  - 分页功能
  - 创建按钮：弹窗打开，输入用户ID和角色，点击确认创建

视觉要求：
  1. 同CDK管理一致。

===============================

库存，生成到 src/domains/admin/pages/stock
- 库存跟CDK差不多
- 库存模型：ID、创建/更新日期时间、appID、deviceId、productId、used、user_id、raw_data
- 列表只包括：ID、创建日期时间、appID、deviceId、productId、used、user_id，最后是 导出json、详情、删除 三个按钮
- 筛选框：创建时间范围、AppID、App产品ID（API请求接口我来实现，目前用mock数据）
- 数量多，包含分页功能。
- 导出按钮：用户选择多项，然后序列化为JSON文件，zip打包下载
- 导入按钮：上传json文件，上传到服务器（留接口，我来失效，目前用mock模拟），成功后手动触发刷新列表

上下文：
1. 使用中文
2. 本项目使用pnpm管理依赖
3. 代码生成之后，编译检查一下是否有问题

===============================

仪表盘，生成到 src/domains/admin/pages/dashboard
- Tab1 兑换趋势: 能查看 所有/某个人 CDK的使用量（根据模型UpdateAt这个字段+used为true），按月、周、日三个维度，曲线图
- Tab2 CDK统计: 查看当前数据的CDK总量（圆饼图），已经使用，未使用，按照 AppId、AppProductId、归属人 筛选。
- Tab3 库存统计：查看当前库存总量（圆饼图），已出和存量，按照 AppId、AppProductId 筛选。

上下文：
1. 使用中文
2. 本项目使用pnpm管理依赖
3. 代码生成之后，编译检查一下是否有问题

====================================

1. 复制[]CDK的Code，一行一个。
2. 检查一下复制成功后是否通知，使用antd自带的通知组件。
3. 有两个 复制到剪切板。移除新建左边的那个复制按钮。
4. 筛选“创建人”下拉没有数据，检查一下。


1. 导出CDK的功能 改成 复制到剪切板，复制完通知用户已经复制到剪切板。
2. 移除模糊搜索功能


1. 使用100个mock数据，支持分页功能，20个数据一页，然后表格整体紧凑一点，内容的padding小一点。
2. 添加筛选功能：是否使用、AppID、AppProductID、上传人ID，下拉选项是否专门的API请求获取，暂时使用mock。


生成 src/domains/admin/pages/cdk/ 文件夹内的代码，src/domains/admin/index.ts 是父级模块，完成子模块的页面展示。
- cdk模块主要是展示cdk数据，和创建、删除操作。
- CDK模型：ID、CreatedAt、Code、used（是否被使用）、used_user（如果使用，使用人）、库存ID（如果使用）、上传人ID、AppID、AppProductID
- 列表页面：包含 ID、创建时间、Code、是否被使用、使用用户、库存ID、创建人ID、AppID、App产品ID
- 列表项最后列：删除
- 搜索框（模糊搜索）：CDK、AppID、App产品ID
- 可能数据量很大，支持分页
- 批量操作：
  1. 批量导出CDK：序列化为json文件下载
  2. 批量删除CDK
- 添加按钮：弹窗，输入 AppId、ProductId、添加数量，确认按钮

====================================

理解 src/domains/admin 目录里的代码，帮我生成 index.tsx 里的代码：
- Header部分
  1. 标题（左边）：凭证后台管理系统
  2. 用户（右边）：用户名称、退出登录
- Body部分
  - 左侧导航栏
    1. 仪表盘：统计CDK销售量，可查看 时、日、周、月。
    2. CDK管理：
    3. 凭证管理：
    4. 用户管理：
  - 右侧内容区
    1. 默认显示仪表盘
    2. 其他暂时先不生成