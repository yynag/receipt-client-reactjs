

src/domains/redeem 调整
- 只有Token和CDK都验证成功后，开始充值按钮才能可以点击，否则是置灰。
- 移动端还是不能上下滚动，找一下原因在哪里，修复一下。
- 开始充值，只要Token和CDK都已经验证，就可以直接发起POST请求去充值，后台会校验CDK和Token。


=== 

src/domains/redeem 问题
1. 移动端/窄屏 的情况下，无法上下滚动。
2. 开始充值 按钮也要mock，用来测试成功和失败：如果账号是mock_ok，第一次成功，第二次失败。
==== 

src/domains/redeem 输入框弹窗修改意见：

- Token成功的情况，显示:
```text
标题：Token验证成功

用户名: username（global_name）
邮箱：test@example.com
手机号码：1234567890
```

- CDK成功的情况，显示：
```text
标题：CDK验证成功

AppID: test_app_123
```


======

src/domains/redeem 修改意见：
- 输入框输入成功之后，输入框下方只写：“验证成功”和“验证失败”。
- 输入框的弹窗：
    1. 标题中去掉 "步骤x: "，比如 “步骤2：输入 CDK” => “输入 CDK”
    2. 下方描述文字：失败写错误信息即可，成功，对于Token，要显示返回的用户信息（你要重新设计显示方式），对于CDK，只要显示返回的app_id即可。
- 添加一个测试账号：
    1. 测试成功账号：Token: mock_ok CDK：mock_ok
    2. 测试失败账号：Token: mock_fail CDK: mock_fail
    3. 账号带到生产环境中（这个账号不会真实请求）

=======

1. 复制脚本按钮放在 书签脚本 的脚本下面，而且不要那么大。
2. 登录网站中，访问的那个URL，要可点击跳转。
3. 输入框，成功border是绿色，失败是红色
4. 查看兑换记录 这个按钮加个边框
5. CDK可以输入小写字母


====== 

prompt/redeem.html 修改意见：
1. 头部、尾部、主体部 的宽度不一致，头尾长，中间短，我要求设置一个相同的宽度
2. 中英文切换 不正常，只有头部的文案被切换了
3. 输入框不需要用 * 加密，明文即可
4. mock数据，正确的token和cdk是 mock 和 mock
5. 复制代码，使用 弹窗组件，而不是alert
6. token和cdk的验证触发：仅输入完按回车触发

整理视觉修改意见，给我看下，确认后补充到 prompt/gen_redeem.txt 提示词中。


- 不需要把问题写入到提示词中
- 你先看一下 prompt/gen_redeem.txt，然后根据理解补充进去，不要直接复制进去。


======

## 回答：
- UI框架不匹配：你可以使用 Ant Design组件
- 缺少国际化系统：redeem是独立的子模块，跟其他没关系，我明确说明不需要。
- API调用方式：只要按 domian 封装就行了
- 路由集成：不需要你管
- 状态管理：不需要你管，useState对于redeem足够了
- 样式不一致：redeem是完全独立的页面，我只是把多个网页合并到一起。
- 错误处理：发生网络错误，你就弹窗提醒用户，按照人类理解的习惯来。
- 不需要特殊的构建配置或环境变量
- 其他不用管

## 要求：
- 把我的回答写入到提示词中，免得每一次都要问。

=========

检查 prompt/gen_redeem.txt 提示词，把下面的确认细节补充到提示词里：

## CDK验证逻辑问题

CDK不检查 premium_type，CDK的验证逻辑是否 used（是否使用），app_id 是给用户确认的，让用户知道自己充值的哪个App

## 错误状态码处理

这个很简单，200代表正常，400代表客户端问题，500代表服务器问题，400和500，body里返回错误的信息，文本格式（不是JSON）

## 主题系统实现

这是独立的页面，跟 admin 没有任何关系

## 历史记录存储

只存储在浏览器本地，不上传服务器

## Token安全性验证

根据返回的JSON，premium_type 如果大于表示这个人已经充值过了，不能再兑换，同一个账户只能兑换一次。

## CDK重复使用检查

兑换失败直接弹窗，告诉用户原因，然后用户点击确认，用户自己重新输入，回车校验CDK是否正确。

## 网络错误处理

400就是客户端问题，500就是服务器问题。

这样，封装一个弹窗组件，所有给用户的信息都用这个组件

## 潜在问题

- XSS风险：这个暂时不考虑
- Token存储： 只存储在浏览器本地，不上传服务器
- API baseURL硬编码：帮我实现吧
- 国际化实现复杂度：这个页面很简单，就这个页面使用，自己实现没问题，写到 translation.ts 里。

## 生成障碍

- 组件交互流程复杂：为啥要弹窗状态管理？封装一个组件，所有给用户的信息，通过创建弹窗解决，就像苹果手机上，弹窗让用户同意还是拒绝。
- 响应式布局细节：如果不管它，可能就会兑换表单区域很小，很难看。移动端直接上下好了。代码上，设置一个固定宽度，然后随着屏幕宽度自动wrap
- 表单验证时机：失焦，或者 回车 也行，你有什么想法吗？


======

完整地检查一遍生成提示词 prompt/gen_redeem.txt，有问题可以问我，要求：
1. 是否匹配当前项目的情况？
2. 还有哪些没有确定的要求？
3. 是否有漏洞或者生成上的问题？

===== 

```text
3. 用户在右侧按步骤填写：
   - 步骤1: 输入Token → 失焦时验证 → 显示用户信息
   - 步骤2: 输入CDK → 失焦时验证 → 显示CDK状态
   - 步骤3: 点击兑换按钮 → 显示加载状态
```
文案只有:
- 步骤1: 输入Token
- 步骤2: 输入CDK

业务逻辑是:
- 步骤1: 输入Token → 失焦时验证 → 显示用户信息
- 步骤2: 输入CDK → 失焦时验证 → 显示CDK状态
- 步骤3: 点击兑换按钮 → 显示加载状态

另外，验证Token，结果弹窗，用户信息放到弹窗里，让用户确认，CDK也是，弹窗告诉用户是否有效。
还有，弹窗加密必要的图标，比如 ❌ 这些视觉效果，错误是红色，正常是绿色。



=======

prompt/gen_redeem.txt 是生成子模块代码的提示词，做一下修改：

## 调整页面布局
- 原来是弹窗展示 获取Token的教程，改成放在主要内容区域，左边是 获取Token的教程，右边是兑换表单区域。
- “快速指南卡片（3步骤说明）” 取消掉，把步骤写到表单里面，比如在Token输入框上方写 “步骤1:输入Token”，即把步骤跟输入框结合到一起。
- 兑换成功后，改成弹窗通知。
- 各部分视觉尺寸大小说明：
    1. “获取Token的教程”区域在左边，宽度比 “兑换表单区域” 小。
    2. “兑换表单区域” 是核心部分，要占据屏幕的主要视野。
    3. “头部区域” 和 “底部声明区域” 高度要小，只保留必要的文字说明。

## 设计风格要求
- 使用 Ant Design 的组件
- 配一个好看的颜色，风格现代化一点

## 代码组织要求

- api
- components
    - RedeemForm：兑换表单区域
    - TokenGuide：Token获取教程区域
    - HistoryModal：兑换历史记录弹窗
- index.tsx
- translation.ts：手动实现翻译，不需要借助第三方依赖

生成完之后，给我看一下，可以的话输出到 prompt/gen_redeem.txt